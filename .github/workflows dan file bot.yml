#!/usr/bin/env python3
"""
dilzz4you_new_bot_full.py
Complete Telegram bot (free + premium locked) for "DILZZ4YOU REAL".

Requirements:
  pip install python-telegram-bot==20.3 apscheduler openpyxl

Run:
  - Locally: export BOT_TOKEN="..." ; python dilzz4you_new_bot_full.py
  - On GitHub Actions: set secret BOT_TOKEN and workflow provided.
"""

import os
import json
import logging
import time
from pathlib import Path
from datetime import datetime
from functools import wraps

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ChatPermissions,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

from apscheduler.schedulers.background import BackgroundScheduler

# ---------------- CONFIG ----------------
OWNER_USERNAME = os.getenv("OWNER_USERNAME", "dilzz4youreal")  # owner username (without @)
# Optionally set OWNER_ID env var (numeric) if you want stricter owner checks:
OWNER_ID_ENV = os.getenv("OWNER_ID", None)

WELCOME_PHOTO = os.getenv("WELCOME_PHOTO", "https://i.ibb.co/Z8M2t4s/dilzz4you-banner.jpg")
WELCOME_TEXT = os.getenv("WELCOME_TEXT", "✨ SELAMAT DATANG DI BOT DILZZ4YOU REAL ✨")

PAYMENT_INFO = {
    "Dana": "083847878388",
    "GoPay": "083168967048",
}

DATA_DIR = Path("data")
DATA_DIR.mkdir(exist_ok=True)

PREMIUM_FILE = DATA_DIR / "premium_users.json"
SETTINGS_FILE = DATA_DIR / "settings.json"
ACTIVITY_FILE = DATA_DIR / "activity.json"
NOTES_FILE = DATA_DIR / "notes.json"
SCHEDULES_FILE = DATA_DIR / "schedules.json"
JOINLOG_FILE = DATA_DIR / "join_log.json"

SPAM_WINDOW_SECONDS = 7
SPAM_THRESHOLD = 5
INACTIVE_DAYS = 60

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ---------------- persistence utils ----------------
def load_json(path, default=None):
    if default is None:
        default = {}
    try:
        if path.exists():
            with path.open("r", encoding="utf-8") as f:
                return json.load(f)
    except Exception as e:
        logger.warning("load_json %s failed: %s", path, e)
    return default

def save_json(path, obj):
    try:
        with path.open("w", encoding="utf-8") as f:
            json.dump(obj, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.warning("save_json %s failed: %s", path, e)

premium_users = load_json(PREMIUM_FILE, {})
settings = load_json(SETTINGS_FILE, {})
activity = load_json(ACTIVITY_FILE, {})
notes_store = load_json(NOTES_FILE, {})
schedules = load_json(SCHEDULES_FILE, {})
join_log = load_json(JOINLOG_FILE, {})

recent_msgs = {}
scheduler = BackgroundScheduler()
scheduler.start()

# ---------------- helpers ----------------
def is_owner(user):
    """Check by numeric ID (if env set) or username fallback."""
    try:
        if OWNER_ID_ENV:
            return str(user.id) == str(OWNER_ID_ENV)
        if
